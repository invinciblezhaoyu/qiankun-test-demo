!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=169)}([function(t,n,e){var r=e(9),o=e(4);t.exports=function(t){if(!o(t))return!1;var n=r(t);return"[object Function]"==n||"[object GeneratorFunction]"==n||"[object AsyncFunction]"==n||"[object Proxy]"==n}},function(t,n,e){"use strict";(function(t){e.d(n,"a",(function(){return Pt})),e.d(n,"b",(function(){return _t})),e.d(n,"c",(function(){return W})),e.d(n,"d",(function(){return ot})),e.d(n,"e",(function(){return Ot})),e.d(n,"f",(function(){return Rt}));var r=Object.freeze({__proto__:null,get start(){return Rt},get ensureJQuerySupport(){return dt},get setBootstrapMaxTime(){return $},get setMountMaxTime(){return K},get setUnmountMaxTime(){return Y},get setUnloadMaxTime(){return Z},get registerApplication(){return Ot},get getMountedApps(){return _t},get getAppStatus(){return Et},get unloadApplication(){return St},get checkActivityFunctions(){return Pt},get getAppNames(){return jt},get pathToActiveWhen(){return Mt},get navigateToUrl(){return ot},get triggerAppChange(){return Nt},get addErrorHandler(){return s},get removeErrorHandler(){return l},get mountRootParcel(){return W},get NOT_LOADED(){return h},get LOADING_SOURCE_CODE(){return v},get NOT_BOOTSTRAPPED(){return y},get BOOTSTRAPPING(){return w},get NOT_MOUNTED(){return m},get MOUNTING(){return b},get UPDATING(){return x},get LOAD_ERROR(){return j},get MOUNTED(){return g},get UNMOUNTING(){return _},get SKIP_BECAUSE_BROKEN(){return E}});function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}var u=("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==t?t:"undefined"!=typeof self?self:{}).CustomEvent,a=function(){try{var t=new u("cat",{detail:{foo:"bar"}});return"cat"===t.type&&"bar"===t.detail.foo}catch(t){}return!1}()?u:"undefined"!=typeof document&&"function"==typeof document.createEvent?function(t,n){var e=document.createEvent("CustomEvent");return n?e.initCustomEvent(t,n.bubbles,n.cancelable,n.detail):e.initCustomEvent(t,!1,!1,void 0),e}:function(t,n){var e=document.createEventObject();return e.type=t,n?(e.bubbles=Boolean(n.bubbles),e.cancelable=Boolean(n.cancelable),e.detail=n.detail):(e.bubbles=!1,e.cancelable=!1,e.detail=void 0),e},c=[];function f(t,n,e){var r=d(t,n,e);c.length?c.forEach((function(t){return t(r)})):setTimeout((function(){throw r}))}function s(t){if("function"!=typeof t)throw Error(p(28,!1));c.push(t)}function l(t){if("function"!=typeof t)throw Error(p(29,!1));var n=!1;return c=c.filter((function(e){var r=e===t;return n=n||r,!r})),n}function p(t,n){for(var e=arguments.length,r=new Array(e>2?e-2:0),o=2;o<e;o++)r[o-2]=arguments[o];return"single-spa minified message #".concat(t,": ").concat(n?n+" ":"","See https://single-spa.js.org/error/?code=").concat(t).concat(r.length?"&arg=".concat(r.join("&arg=")):"")}function d(t,n,e){var r,o="".concat(T(n)," '").concat(S(n),"' died in status ").concat(n.status,": ");if(t instanceof Error){try{t.message=o+t.message}catch(t){}r=t}else{console.warn(p(30,!1,n.status,S(n)));try{r=Error(o+JSON.stringify(t))}catch(n){r=t}}return r.appOrParcelName=S(n),n.status=e,r}var h="NOT_LOADED",v="LOADING_SOURCE_CODE",y="NOT_BOOTSTRAPPED",w="BOOTSTRAPPING",m="NOT_MOUNTED",b="MOUNTING",g="MOUNTED",x="UPDATING",_="UNMOUNTING",j="LOAD_ERROR",E="SKIP_BECAUSE_BROKEN";function O(t){return t.status===g}function P(t){try{return t.activeWhen(window.location)}catch(n){return f(n,t,E),!1}}function S(t){return t.name}function A(t){return Boolean(t.unmountThisParcel)}function T(t){return A(t)?"parcel":"application"}function M(){for(var t=arguments.length-1;t>0;t--)for(var n in arguments[t])"__proto__"!==n&&(arguments[t-1][n]=arguments[t][n]);return arguments[0]}function L(t,n){for(var e=0;e<t.length;e++)if(n(t[e]))return t[e];return null}function I(t){return t&&("function"==typeof t||(n=t,Array.isArray(n)&&!L(n,(function(t){return"function"!=typeof t}))));var n}function N(t,n){var e=t[n]||[];0===(e=Array.isArray(e)?e:[e]).length&&(e=[function(){return Promise.resolve()}]);var r=T(t),o=S(t);return function(t){return e.reduce((function(e,i,u){return e.then((function(){var e=i(t);return U(e)?e:Promise.reject(p(15,!1,r,o,n,u))}))}),Promise.resolve())}}function U(t){return t&&"function"==typeof t.then&&"function"==typeof t.catch}function D(t,n){return Promise.resolve().then((function(){return t.status!==y?t:(t.status=w,J(t,"bootstrap").then((function(){return t.status=m,t})).catch((function(e){if(n)throw d(e,t,E);return f(e,t,E),t})))}))}function C(t,n){return Promise.resolve().then((function(){if(t.status!==g)return t;t.status=_;var e=Object.keys(t.parcels).map((function(n){return t.parcels[n].unmountThisParcel()}));return Promise.all(e).then(r,(function(e){return r().then((function(){var r=Error(e.message);if(n)throw d(r,t,E);f(r,t,E)}))})).then((function(){return t}));function r(){return J(t,"unmount").then((function(){t.status=m})).catch((function(e){if(n)throw d(e,t,E);f(e,t,E)}))}}))}var R=!1,k=!1;function H(t,n){return Promise.resolve().then((function(){return t.status!==m?t:(R||(window.dispatchEvent(new a("single-spa:before-first-mount")),R=!0),J(t,"mount").then((function(){return t.status=g,k||(window.dispatchEvent(new a("single-spa:first-mount")),k=!0),t})).catch((function(e){return t.status=g,C(t,!0).then(r,r);function r(){if(n)throw d(e,t,E);return f(e,t,E),t}})))}))}var B=0,G={parcels:{}};function W(){return z.apply(G,arguments)}function z(t,n){var e=this;if(!t||"object"!==o(t)&&"function"!=typeof t)throw Error(p(2,!1));if(t.name&&"string"!=typeof t.name)throw Error(p(3,!1,o(t.name)));if("object"!==o(n))throw Error(p(4,!1,name,o(n)));if(!n.domElement)throw Error(p(5,!1,name));var r,i=B++,u="function"==typeof t,a=u?t:function(){return Promise.resolve(t)},c={id:i,parcels:{},status:u?v:y,customProps:n,parentName:S(e),unmountThisParcel:function(){if(c.status!==g)throw Error(p(6,!1,name,c.status));return C(c,!0).then((function(t){return c.parentName&&delete e.parcels[c.id],t})).then((function(t){return s(t),t})).catch((function(t){throw c.status=E,l(t),t}))}};e.parcels[i]=c;var f=a();if(!f||"function"!=typeof f.then)throw Error(p(7,!1));var s,l,h=(f=f.then((function(t){if(!t)throw Error(p(8,!1));var n=t.name||"parcel-".concat(i);if(!I(t.bootstrap))throw Error(p(9,!1,n));if(!I(t.mount))throw Error(p(10,!1,n));if(!I(t.unmount))throw Error(p(11,!1,n));if(t.update&&!I(t.update))throw Error(p(12,!1,n));var e=N(t,"bootstrap"),o=N(t,"mount"),u=N(t,"unmount");c.status=y,c.name=n,c.bootstrap=e,c.mount=o,c.unmount=u,c.timeouts=Q(t.timeouts),t.update&&(c.update=N(t,"update"),r.update=function(t){return c.customProps=t,q(function(t){return Promise.resolve().then((function(){if(t.status!==g)throw Error(p(32,!1,S(t)));return t.status=x,J(t,"update").then((function(){return t.status=g,t})).catch((function(n){throw d(n,t,E)}))}))}(c))})}))).then((function(){return D(c,!0)})),w=h.then((function(){return H(c,!0)})),b=new Promise((function(t,n){s=t,l=n}));return r={mount:function(){return q(Promise.resolve().then((function(){if(c.status!==m)throw Error(p(13,!1,name,c.status));return e.parcels[i]=c,H(c)})))},unmount:function(){return q(c.unmountThisParcel())},getStatus:function(){return c.status},loadPromise:q(f),bootstrapPromise:q(h),mountPromise:q(w),unmountPromise:q(b)}}function q(t){return t.then((function(){return null}))}function F(t){var n=S(t),e="function"==typeof t.customProps?t.customProps(n,window.location):t.customProps;("object"!==o(e)||null===e||Array.isArray(e))&&(e={},console.warn(p(40,!1),n,e));var i=M({},e,{name:n,mountParcel:z.bind(t),singleSpa:r});return A(t)&&(i.unmountSelf=t.unmountThisParcel),i}var V={bootstrap:{millis:4e3,dieOnTimeout:!1,warningMillis:1e3},mount:{millis:3e3,dieOnTimeout:!1,warningMillis:1e3},unmount:{millis:3e3,dieOnTimeout:!1,warningMillis:1e3},unload:{millis:3e3,dieOnTimeout:!1,warningMillis:1e3},update:{millis:3e3,dieOnTimeout:!1,warningMillis:1e3}};function $(t,n,e){if("number"!=typeof t||t<=0)throw Error(p(16,!1));V.bootstrap={millis:t,dieOnTimeout:n,warningMillis:e||1e3}}function K(t,n,e){if("number"!=typeof t||t<=0)throw Error(p(17,!1));V.mount={millis:t,dieOnTimeout:n,warningMillis:e||1e3}}function Y(t,n,e){if("number"!=typeof t||t<=0)throw Error(p(18,!1));V.unmount={millis:t,dieOnTimeout:n,warningMillis:e||1e3}}function Z(t,n,e){if("number"!=typeof t||t<=0)throw Error(p(19,!1));V.unload={millis:t,dieOnTimeout:n,warningMillis:e||1e3}}function J(t,n){var e=t.timeouts[n],r=e.warningMillis,o=T(t);return new Promise((function(i,u){var a=!1,c=!1;t[n](F(t)).then((function(t){a=!0,i(t)})).catch((function(t){a=!0,u(t)})),setTimeout((function(){return s(1)}),r),setTimeout((function(){return s(!0)}),e.millis);var f=p(31,!1,n,o,S(t),e.millis);function s(t){if(!a)if(!0===t)c=!0,e.dieOnTimeout?u(Error(f)):console.error(f);else if(!c){var n=t,o=n*r;console.warn(f),o+r<e.millis&&setTimeout((function(){return s(n+1)}),r)}}}))}function Q(t){var n={};for(var e in V)n[e]=M({},V[e],t&&t[e]||{});return n}function X(t){return Promise.resolve().then((function(){return t.loadPromise?t.loadPromise:t.status!==h&&t.status!==j?t:(t.status=v,t.loadPromise=Promise.resolve().then((function(){var r=t.loadApp(F(t));if(!U(r))throw e=!0,Error(p(33,!1,S(t)));return r.then((function(e){var r;t.loadErrorTime=null,"object"!==o(n=e)&&(r=34),I(n.bootstrap)||(r=35),I(n.mount)||(r=36),I(n.unmount)||(r=37);var i=T(n);if(r){var u;try{u=JSON.stringify(n)}catch(t){}return console.error(p(r,!1,i,S(t),u),n),f(void 0,t,E),t}return n.devtools&&n.devtools.overlays&&(t.devtools.overlays=M({},t.devtools.overlays,n.devtools.overlays)),t.status=y,t.bootstrap=N(n,"bootstrap"),t.mount=N(n,"mount"),t.unmount=N(n,"unmount"),t.unload=N(n,"unload"),t.timeouts=Q(n.timeouts),delete t.loadPromise,t}))})).catch((function(n){var r;return delete t.loadPromise,e?r=E:(r=j,t.loadErrorTime=(new Date).getTime()),f(n,t,r),t})));var n,e}))}var tt,nt="undefined"!=typeof window,et={hashchange:[],popstate:[]},rt=["hashchange","popstate"];function ot(t){var n;if("string"==typeof t)n=t;else if(this&&this.href)n=this.href;else{if(!(t&&t.currentTarget&&t.currentTarget.href&&t.preventDefault))throw Error(p(14,!1));n=t.currentTarget.href,t.preventDefault()}var e=lt(window.location.href),r=lt(n);0===n.indexOf("#")?window.location.hash=r.hash:e.host!==r.host&&r.host?window.location.href=n:r.pathname===e.pathname&&r.search===e.search?window.location.hash=r.hash:window.history.pushState(null,null,n)}function it(t){var n=this;if(t){var e=t[0].type;rt.indexOf(e)>=0&&et[e].forEach((function(e){try{e.apply(n,t)}catch(t){setTimeout((function(){throw t}))}}))}}function ut(){Ut([],arguments)}function at(t,n){return function(){var e=window.location.href,r=t.apply(this,arguments),o=window.location.href;return tt&&e===o||ut(ct(window.history.state,n)),r}}function ct(t,n){var e;try{e=new PopStateEvent("popstate",{state:t})}catch(n){(e=document.createEvent("PopStateEvent")).initPopStateEvent("popstate",!1,!1,t)}return e.singleSpa=!0,e.singleSpaTrigger=n,e}if(nt){window.addEventListener("hashchange",ut),window.addEventListener("popstate",ut);var ft=window.addEventListener,st=window.removeEventListener;window.addEventListener=function(t,n){if(!("function"==typeof n&&rt.indexOf(t)>=0)||L(et[t],(function(t){return t===n})))return ft.apply(this,arguments);et[t].push(n)},window.removeEventListener=function(t,n){if(!("function"==typeof n&&rt.indexOf(t)>=0))return st.apply(this,arguments);et[t]=et[t].filter((function(t){return t!==n}))},window.history.pushState=at(window.history.pushState,"pushState"),window.history.replaceState=at(window.history.replaceState,"replaceState"),window.singleSpaNavigate=ot}function lt(t){var n=document.createElement("a");return n.href=t,n}var pt=!1;function dt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window.jQuery;if(t||window.$&&window.$.fn&&window.$.fn.jquery&&(t=window.$),t&&!pt){var n=t.fn.on,e=t.fn.off;t.fn.on=function(t,e){return ht.call(this,n,window.addEventListener,t,e,arguments)},t.fn.off=function(t,n){return ht.call(this,e,window.removeEventListener,t,n,arguments)},pt=!0}}function ht(t,n,e,r,o){return"string"!=typeof e?t.apply(this,o):(e.split(/\s+/).forEach((function(t){rt.indexOf(t)>=0&&(n(t,r),e=e.replace(t,""))})),""===e.trim()?this:t.apply(this,o))}var vt={};function yt(t){return Promise.resolve().then((function(){var n=vt[S(t)];return n?t.status===h?(wt(t,n),t):"UNLOADING"===t.status?n.promise.then((function(){return t})):t.status!==m?t:(t.status="UNLOADING",J(t,"unload").then((function(){return wt(t,n),t})).catch((function(e){return function(t,n,e){delete vt[S(t)],delete t.bootstrap,delete t.mount,delete t.unmount,delete t.unload,f(e,t,E),n.reject(e)}(t,n,e),t}))):t}))}function wt(t,n){delete vt[S(t)],delete t.bootstrap,delete t.mount,delete t.unmount,delete t.unload,t.status=h,n.resolve()}function mt(t,n,e,r){vt[S(t)]={app:t,resolve:e,reject:r},Object.defineProperty(vt[S(t)],"promise",{get:n})}function bt(t){return vt[t]}var gt=[];function xt(){var t=[],n=[],e=[],r=[],o=(new Date).getTime();return gt.forEach((function(i){var u=i.status!==E&&P(i);switch(i.status){case j:o-i.loadErrorTime>=200&&e.push(i);break;case h:u&&e.push(i);break;case y:case m:!u&&bt(S(i))?t.push(i):u&&r.push(i);break;case g:u||n.push(i)}})),{appsToUnload:t,appsToUnmount:n,appsToLoad:e,appsToMount:r}}function _t(){return gt.filter(O).map(S)}function jt(){return gt.map(S)}function Et(t){var n=L(gt,(function(n){return S(n)===t}));return n?n.status:null}function Ot(t,n,e,r){var i=function(t,n,e,r){var i,u={name:null,loadApp:null,activeWhen:null,customProps:null};return"object"===o(t)?(function(t){if(Array.isArray(t)||null===t)throw Error(p(39,!1));var n=["name","app","activeWhen","customProps"],e=Object.keys(t).reduce((function(t,e){return n.includes(e)?t:t.concat(e)}),[]);if(0!==e.length)throw Error(p(38,!1,n.join(", "),e.join(", ")));if("string"!=typeof t.name||0===t.name.length)throw Error(p(20,!1));if("object"!==o(t.app)&&"function"!=typeof t.app)throw Error(p(20,!1));var r=function(t){return"string"==typeof t||"function"==typeof t};if(!(r(t.activeWhen)||Array.isArray(t.activeWhen)&&t.activeWhen.every(r)))throw Error(p(24,!1));if(!Tt(t.customProps))throw Error(p(22,!1))}(t),u.name=t.name,u.loadApp=t.app,u.activeWhen=t.activeWhen,u.customProps=t.customProps):(function(t,n,e,r){if("string"!=typeof t||0===t.length)throw Error(p(20,!1));if(!n)throw Error(p(23,!1));if("function"!=typeof e)throw Error(p(24,!1));if(!Tt(r))throw Error(p(22,!1))}(t,n,e,r),u.name=t,u.loadApp=n,u.activeWhen=e,u.customProps=r),u.loadApp="function"!=typeof(i=u.loadApp)?function(){return Promise.resolve(i)}:i,u.customProps=function(t){return t||{}}(u.customProps),u.activeWhen=function(t){var n=Array.isArray(t)?t:[t];return n=n.map((function(t){return"function"==typeof t?t:Mt(t)})),function(t){return n.some((function(n){return n(t)}))}}(u.activeWhen),u}(t,n,e,r);if(-1!==jt().indexOf(i.name))throw Error(p(21,!1,i.name));gt.push(M({loadErrorTime:null,status:h,parcels:{},devtools:{overlays:{options:{},selectors:[]}}},i)),nt&&(dt(),Ut())}function Pt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window.location;return gt.filter((function(n){return n.activeWhen(t)})).map(S)}function St(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{waitForUnmount:!1};if("string"!=typeof t)throw Error(p(26,!1));var e=L(gt,(function(n){return S(n)===t}));if(!e)throw Error(p(27,!1,t));var r,o=bt(S(e));if(n&&n.waitForUnmount){if(o)return o.promise;var i=new Promise((function(t,n){mt(e,(function(){return i}),t,n)}));return i}return o?(r=o.promise,At(e,o.resolve,o.reject)):r=new Promise((function(t,n){mt(e,(function(){return r}),t,n),At(e,t,n)})),r}function At(t,n,e){C(t).then(yt).then((function(){n(),setTimeout((function(){Ut()}))})).catch(e)}function Tt(t){return!t||"function"==typeof t||"object"===o(t)&&null!==t&&!Array.isArray(t)}function Mt(t){var n=function(t){for(var n=0,e=!1,r="^",o=0;o<t.length;o++){var i=t[o];(!e&&":"===i||e&&"/"===i)&&u(o)}return u(t.length),new RegExp(r,"i");function u(o){var i=t.slice(n,o).replace(/[|\\{}()[\]^$+*?.]/g,"\\$&");r+=e?"[^/]+/?":i,e=!e,n=o}}(t);return function(t){var e=t.href.replace(t.origin,"");return n.test(e)}}var Lt=!1,It=[];function Nt(){return Ut()}function Ut(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1?arguments[1]:void 0;if(Lt)return new Promise((function(t,e){It.push({resolve:t,reject:e,eventArguments:n})}));var e,r=xt(),o=r.appsToUnload,u=r.appsToUnmount,c=r.appsToLoad,f=r.appsToMount;return kt()?(Lt=!0,e=o.concat(c,u,f),l()):(e=c,s());function s(){return Promise.resolve().then((function(){var t=c.map(X);return Promise.all(t).then(d).then((function(){return[]})).catch((function(t){throw d(),t}))}))}function l(){return Promise.resolve().then((function(){window.dispatchEvent(new a(0===e.length?"single-spa:before-no-app-change":"single-spa:before-app-change",v(!0))),window.dispatchEvent(new a("single-spa:before-routing-event",v(!0)));var n=o.map(yt),r=u.map(C).map((function(t){return t.then(yt)})).concat(n),i=Promise.all(r);i.then((function(){window.dispatchEvent(new a("single-spa:before-mount-routing-event",v(!0)))}));var s=c.map((function(t){return X(t).then((function(t){return Dt(t,i)}))})),l=f.filter((function(t){return c.indexOf(t)<0})).map((function(t){return Dt(t,i)}));return i.catch((function(t){throw d(),t})).then((function(){return d(),Promise.all(s.concat(l)).catch((function(n){throw t.forEach((function(t){return t.reject(n)})),n})).then(p)}))}))}function p(){var n=_t();t.forEach((function(t){return t.resolve(n)}));try{var r=0===e.length?"single-spa:no-app-change":"single-spa:app-change";window.dispatchEvent(new a(r,v())),window.dispatchEvent(new a("single-spa:routing-event",v()))}catch(t){setTimeout((function(){throw t}))}if(Lt=!1,It.length>0){var o=It;It=[],Ut(o)}return n}function d(){t.forEach((function(t){it(t.eventArguments)})),it(n)}function v(){var t,r=arguments.length>0&&void 0!==arguments[0]&&arguments[0],a={},s=(i(t={},g,[]),i(t,m,[]),i(t,h,[]),i(t,E,[]),t);return r?(c.concat(f).forEach((function(t,n){l(t,g)})),o.forEach((function(t){l(t,h)})),u.forEach((function(t){l(t,m)}))):e.forEach((function(t){l(t)})),{detail:{newAppStatuses:a,appsByNewStatus:s,totalAppChanges:e.length,originalEvent:null==n?void 0:n[0]}};function l(t,n){var e=S(t);n=n||Et(e),a[e]=n,(s[n]=s[n]||[]).push(e)}}}function Dt(t,n){return P(t)?D(t).then((function(t){return n.then((function(){return P(t)?H(t):t}))})):n.then((function(){return t}))}var Ct=!1;function Rt(t){var n;Ct=!0,t&&t.urlRerouteOnly&&(n=t.urlRerouteOnly,tt=n),nt&&Ut()}function kt(){return Ct}nt&&setTimeout((function(){Ct||console.warn(p(1,!1))}),5e3);var Ht={getRawAppData:function(){return[].concat(gt)},reroute:Ut,NOT_LOADED:h,toLoadPromise:X,toBootstrapPromise:D,unregisterApplication:function(t){if(!gt.find((function(n){return S(n)===t})))throw Error(p(25,!1,t));return St(t).then((function(){var n=gt.findIndex((function(n){return S(n)===t}));gt.splice(n,1)}))}};nt&&window.__SINGLE_SPA_DEVTOOLS__&&(window.__SINGLE_SPA_DEVTOOLS__.exposedMethods=Ht)}).call(this,e(36))},function(t,n,e){var r=e(37),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();t.exports=i},function(t,n){t.exports=function(){}},function(t,n){t.exports=function(t){var n=typeof t;return null!=t&&("object"==n||"function"==n)}},function(t,n){t.exports=function(t){return null!=t&&"object"==typeof t}},function(t,n,e){var r=e(146);t.exports=function(t){return r(t,5)}},function(t,n){var e=Array.isArray;t.exports=e},function(t,n,e){var r=e(91),o=e(94);t.exports=function(t,n){var e=o(t,n);return r(e)?e:void 0}},function(t,n,e){var r=e(10),o=e(63),i=e(64),u=r?r.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":u&&u in Object(t)?o(t):i(t)}},function(t,n,e){var r=e(2).Symbol;t.exports=r},function(t,n,e){var r=e(51),o=e(25);t.exports=function(t,n,e,i){var u=!e;e||(e={});for(var a=-1,c=n.length;++a<c;){var f=n[a],s=i?i(e[f],t[f],f,e,t):void 0;void 0===s&&(s=t[f]),u?o(e,f,s):r(e,f,s)}return e}},function(t,n){t.exports=function(t,n){for(var e=-1,r=n.length,o=t.length;++e<r;)t[o+e]=n[e];return t}},function(t,n,e){var r=e(81),o=e(82),i=e(83),u=e(84),a=e(85);function c(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=u,c.prototype.set=a,t.exports=c},function(t,n,e){var r=e(15);t.exports=function(t,n){for(var e=t.length;e--;)if(r(t[e][0],n))return e;return-1}},function(t,n){t.exports=function(t,n){return t===n||t!=t&&n!=n}},function(t,n,e){var r=e(8)(Object,"create");t.exports=r},function(t,n,e){var r=e(103);t.exports=function(t,n){var e=t.__data__;return r(n)?e["string"==typeof n?"string":"hash"]:e.map}},function(t,n,e){var r=e(0),o=e(48);t.exports=function(t){return null!=t&&o(t.length)&&!r(t)}},function(t,n,e){var r=e(52),o=e(118),i=e(18);t.exports=function(t){return i(t)?r(t,!0):o(t)}},function(t,n,e){var r=e(12),o=e(77),i=e(23),u=e(7);t.exports=function(){var t=arguments.length;if(!t)return[];for(var n=Array(t-1),e=arguments[0],a=t;a--;)n[a-1]=arguments[a];return r(u(e)?i(e):[e],o(n,1))}},function(t,n,e){var r=e(80),o=e(120)((function(t,n,e,o){r(t,n,e,o)}));t.exports=o},function(t,n,e){var r=e(79),o=e(5),i=Object.prototype,u=i.hasOwnProperty,a=i.propertyIsEnumerable,c=r(function(){return arguments}())?r:function(t){return o(t)&&u.call(t,"callee")&&!a.call(t,"callee")};t.exports=c},function(t,n){t.exports=function(t,n){var e=-1,r=t.length;for(n||(n=Array(r));++e<r;)n[e]=t[e];return n}},function(t,n,e){var r=e(8)(e(2),"Map");t.exports=r},function(t,n,e){var r=e(43);t.exports=function(t,n,e){"__proto__"==n&&r?r(t,n,{configurable:!0,enumerable:!0,value:e,writable:!0}):t[n]=e}},function(t,n){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,n,e){var r=e(110);t.exports=function(t){var n=new t.constructor(t.byteLength);return new r(n).set(new r(t)),n}},function(t,n,e){var r=e(47)(Object.getPrototypeOf,Object);t.exports=r},function(t,n){var e=Object.prototype;t.exports=function(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||e)}},function(t,n,e){(function(t){var r=e(2),o=e(113),i=n&&!n.nodeType&&n,u=i&&"object"==typeof t&&t&&!t.nodeType&&t,a=u&&u.exports===i?r.Buffer:void 0,c=(a?a.isBuffer:void 0)||o;t.exports=c}).call(this,e(26)(t))},function(t,n){t.exports=function(t){return function(n){return t(n)}}},function(t,n,e){(function(t){var r=e(37),o=n&&!n.nodeType&&n,i=o&&"object"==typeof t&&t&&!t.nodeType&&t,u=i&&i.exports===o&&r.process,a=function(){try{var t=i&&i.require&&i.require("util").types;return t||u&&u.binding&&u.binding("util")}catch(t){}}();t.exports=a}).call(this,e(26)(t))},function(t,n,e){var r=e(52),o=e(149),i=e(18);t.exports=function(t){return i(t)?r(t):o(t)}},function(t,n,e){var r=e(153),o=e(57),i=Object.prototype.propertyIsEnumerable,u=Object.getOwnPropertySymbols,a=u?function(t){return null==t?[]:(t=Object(t),r(u(t),(function(n){return i.call(t,n)})))}:o;t.exports=a},function(t,n,e){var r=e(157),o=e(24),i=e(158),u=e(55),a=e(159),c=e(9),f=e(40),s=f(r),l=f(o),p=f(i),d=f(u),h=f(a),v=c;(r&&"[object DataView]"!=v(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=v(new o)||i&&"[object Promise]"!=v(i.resolve())||u&&"[object Set]"!=v(new u)||a&&"[object WeakMap]"!=v(new a))&&(v=function(t){var n=c(t),e="[object Object]"==n?t.constructor:void 0,r=e?f(e):"";if(r)switch(r){case s:return"[object DataView]";case l:return"[object Map]";case p:return"[object Promise]";case d:return"[object Set]";case h:return"[object WeakMap]"}return n}),t.exports=v},function(t,n){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n,e){(function(n){var e="object"==typeof n&&n&&n.Object===Object&&n;t.exports=e}).call(this,e(36))},function(t,n,e){var r=e(70);t.exports=function(t){return null==t?"":r(t)}},function(t,n,e){var r=e(13),o=e(86),i=e(87),u=e(88),a=e(89),c=e(90);function f(t){var n=this.__data__=new r(t);this.size=n.size}f.prototype.clear=o,f.prototype.delete=i,f.prototype.get=u,f.prototype.has=a,f.prototype.set=c,t.exports=f},function(t,n){var e=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return e.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},function(t,n,e){var r=e(95),o=e(102),i=e(104),u=e(105),a=e(106);function c(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=u,c.prototype.set=a,t.exports=c},function(t,n,e){var r=e(25),o=e(15);t.exports=function(t,n,e){(void 0!==e&&!o(t[n],e)||void 0===e&&!(n in t))&&r(t,n,e)}},function(t,n,e){var r=e(8),o=function(){try{var t=r(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();t.exports=o},function(t,n,e){(function(t){var r=e(2),o=n&&!n.nodeType&&n,i=o&&"object"==typeof t&&t&&!t.nodeType&&t,u=i&&i.exports===o?r.Buffer:void 0,a=u?u.allocUnsafe:void 0;t.exports=function(t,n){if(n)return t.slice();var e=t.length,r=a?a(e):new t.constructor(e);return t.copy(r),r}}).call(this,e(26)(t))},function(t,n,e){var r=e(27);t.exports=function(t,n){var e=n?r(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.length)}},function(t,n,e){var r=e(111),o=e(28),i=e(29);t.exports=function(t){return"function"!=typeof t.constructor||i(t)?{}:r(o(t))}},function(t,n){t.exports=function(t,n){return function(e){return t(n(e))}}},function(t,n){t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}},function(t,n,e){var r=e(115),o=e(31),i=e(32),u=i&&i.isTypedArray,a=u?o(u):r;t.exports=a},function(t,n){t.exports=function(t,n){if(("constructor"!==n||"function"!=typeof t[n])&&"__proto__"!=n)return t[n]}},function(t,n,e){var r=e(25),o=e(15),i=Object.prototype.hasOwnProperty;t.exports=function(t,n,e){var u=t[n];i.call(t,n)&&o(u,e)&&(void 0!==e||n in t)||r(t,n,e)}},function(t,n,e){var r=e(117),o=e(22),i=e(7),u=e(30),a=e(53),c=e(49),f=Object.prototype.hasOwnProperty;t.exports=function(t,n){var e=i(t),s=!e&&o(t),l=!e&&!s&&u(t),p=!e&&!s&&!l&&c(t),d=e||s||l||p,h=d?r(t.length,String):[],v=h.length;for(var y in t)!n&&!f.call(t,y)||d&&("length"==y||l&&("offset"==y||"parent"==y)||p&&("buffer"==y||"byteLength"==y||"byteOffset"==y)||a(y,v))||h.push(y);return h}},function(t,n){var e=/^(?:0|[1-9]\d*)$/;t.exports=function(t,n){var r=typeof t;return!!(n=null==n?9007199254740991:n)&&("number"==r||"symbol"!=r&&e.test(t))&&t>-1&&t%1==0&&t<n}},function(t,n){t.exports=function(t){return t}},function(t,n,e){var r=e(8)(e(2),"Set");t.exports=r},function(t,n){t.exports=function(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=t})),e}},function(t,n){t.exports=function(){return[]}},function(t,n,e){var r=e(12),o=e(28),i=e(34),u=e(57),a=Object.getOwnPropertySymbols?function(t){for(var n=[];t;)r(n,i(t)),t=o(t);return n}:u;t.exports=a},function(t,n,e){var r=e(12),o=e(7);t.exports=function(t,n,e){var i=n(t);return o(t)?i:r(i,e(t))}},function(t,n,e){var r=e(65)((function(t,n,e){return t+(e?"_":"")+n.toLowerCase()}));t.exports=r},function(t,n,e){var r=e(129),o=e(130),i=e(131),u=e(133);t.exports=function(t,n){return r(t)||o(t,n)||i(t,n)||u()}},function(t,n,e){var r=e(134);t.exports=function(t){return t&&t.length?r(t):[]}},function(t,n,e){var r=e(10),o=Object.prototype,i=o.hasOwnProperty,u=o.toString,a=r?r.toStringTag:void 0;t.exports=function(t){var n=i.call(t,a),e=t[a];try{t[a]=void 0;var r=!0}catch(t){}var o=u.call(t);return r&&(n?t[a]=e:delete t[a]),o}},function(t,n){var e=Object.prototype.toString;t.exports=function(t){return e.call(t)}},function(t,n,e){var r=e(66),o=e(67),i=e(73),u=RegExp("['’]","g");t.exports=function(t){return function(n){return r(i(o(n).replace(u,"")),t,"")}}},function(t,n){t.exports=function(t,n,e,r){var o=-1,i=null==t?0:t.length;for(r&&i&&(e=t[++o]);++o<i;)e=n(e,t[o],o,t);return e}},function(t,n,e){var r=e(68),o=e(38),i=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,u=RegExp("[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]","g");t.exports=function(t){return(t=o(t))&&t.replace(i,r).replace(u,"")}},function(t,n,e){var r=e(69)({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"});t.exports=r},function(t,n){t.exports=function(t){return function(n){return null==t?void 0:t[n]}}},function(t,n,e){var r=e(10),o=e(71),i=e(7),u=e(72),a=r?r.prototype:void 0,c=a?a.toString:void 0;t.exports=function t(n){if("string"==typeof n)return n;if(i(n))return o(n,t)+"";if(u(n))return c?c.call(n):"";var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(t,n){t.exports=function(t,n){for(var e=-1,r=null==t?0:t.length,o=Array(r);++e<r;)o[e]=n(t[e],e,t);return o}},function(t,n,e){var r=e(9),o=e(5);t.exports=function(t){return"symbol"==typeof t||o(t)&&"[object Symbol]"==r(t)}},function(t,n,e){var r=e(74),o=e(75),i=e(38),u=e(76);t.exports=function(t,n,e){return t=i(t),void 0===(n=e?void 0:n)?o(t)?u(t):r(t):t.match(n)||[]}},function(t,n){var e=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;t.exports=function(t){return t.match(e)||[]}},function(t,n){var e=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;t.exports=function(t){return e.test(t)}},function(t,n){var e="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",r="["+e+"]",o="\\d+",i="[\\u2700-\\u27bf]",u="[a-z\\xdf-\\xf6\\xf8-\\xff]",a="[^\\ud800-\\udfff"+e+o+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",c="(?:\\ud83c[\\udde6-\\uddff]){2}",f="[\\ud800-\\udbff][\\udc00-\\udfff]",s="[A-Z\\xc0-\\xd6\\xd8-\\xde]",l="(?:"+u+"|"+a+")",p="(?:"+s+"|"+a+")",d="(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?",h="[\\ufe0e\\ufe0f]?"+d+("(?:\\u200d(?:"+["[^\\ud800-\\udfff]",c,f].join("|")+")[\\ufe0e\\ufe0f]?"+d+")*"),v="(?:"+[i,c,f].join("|")+")"+h,y=RegExp([s+"?"+u+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[r,s,"$"].join("|")+")",p+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[r,s+l,"$"].join("|")+")",s+"?"+l+"+(?:['’](?:d|ll|m|re|s|t|ve))?",s+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",o,v].join("|"),"g");t.exports=function(t){return t.match(y)||[]}},function(t,n,e){var r=e(12),o=e(78);t.exports=function t(n,e,i,u,a){var c=-1,f=n.length;for(i||(i=o),a||(a=[]);++c<f;){var s=n[c];e>0&&i(s)?e>1?t(s,e-1,i,u,a):r(a,s):u||(a[a.length]=s)}return a}},function(t,n,e){var r=e(10),o=e(22),i=e(7),u=r?r.isConcatSpreadable:void 0;t.exports=function(t){return i(t)||o(t)||!!(u&&t&&t[u])}},function(t,n,e){var r=e(9),o=e(5);t.exports=function(t){return o(t)&&"[object Arguments]"==r(t)}},function(t,n,e){var r=e(39),o=e(42),i=e(107),u=e(109),a=e(4),c=e(19),f=e(50);t.exports=function t(n,e,s,l,p){n!==e&&i(e,(function(i,c){if(p||(p=new r),a(i))u(n,e,c,s,t,l,p);else{var d=l?l(f(n,c),i,c+"",n,e,p):void 0;void 0===d&&(d=i),o(n,c,d)}}),c)}},function(t,n){t.exports=function(){this.__data__=[],this.size=0}},function(t,n,e){var r=e(14),o=Array.prototype.splice;t.exports=function(t){var n=this.__data__,e=r(n,t);return!(e<0)&&(e==n.length-1?n.pop():o.call(n,e,1),--this.size,!0)}},function(t,n,e){var r=e(14);t.exports=function(t){var n=this.__data__,e=r(n,t);return e<0?void 0:n[e][1]}},function(t,n,e){var r=e(14);t.exports=function(t){return r(this.__data__,t)>-1}},function(t,n,e){var r=e(14);t.exports=function(t,n){var e=this.__data__,o=r(e,t);return o<0?(++this.size,e.push([t,n])):e[o][1]=n,this}},function(t,n,e){var r=e(13);t.exports=function(){this.__data__=new r,this.size=0}},function(t,n){t.exports=function(t){var n=this.__data__,e=n.delete(t);return this.size=n.size,e}},function(t,n){t.exports=function(t){return this.__data__.get(t)}},function(t,n){t.exports=function(t){return this.__data__.has(t)}},function(t,n,e){var r=e(13),o=e(24),i=e(41);t.exports=function(t,n){var e=this.__data__;if(e instanceof r){var u=e.__data__;if(!o||u.length<199)return u.push([t,n]),this.size=++e.size,this;e=this.__data__=new i(u)}return e.set(t,n),this.size=e.size,this}},function(t,n,e){var r=e(0),o=e(92),i=e(4),u=e(40),a=/^\[object .+?Constructor\]$/,c=Function.prototype,f=Object.prototype,s=c.toString,l=f.hasOwnProperty,p=RegExp("^"+s.call(l).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!i(t)||o(t))&&(r(t)?p:a).test(u(t))}},function(t,n,e){var r,o=e(93),i=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";t.exports=function(t){return!!i&&i in t}},function(t,n,e){var r=e(2)["__core-js_shared__"];t.exports=r},function(t,n){t.exports=function(t,n){return null==t?void 0:t[n]}},function(t,n,e){var r=e(96),o=e(13),i=e(24);t.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||o),string:new r}}},function(t,n,e){var r=e(97),o=e(98),i=e(99),u=e(100),a=e(101);function c(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=u,c.prototype.set=a,t.exports=c},function(t,n,e){var r=e(16);t.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(t,n){t.exports=function(t){var n=this.has(t)&&delete this.__data__[t];return this.size-=n?1:0,n}},function(t,n,e){var r=e(16),o=Object.prototype.hasOwnProperty;t.exports=function(t){var n=this.__data__;if(r){var e=n[t];return"__lodash_hash_undefined__"===e?void 0:e}return o.call(n,t)?n[t]:void 0}},function(t,n,e){var r=e(16),o=Object.prototype.hasOwnProperty;t.exports=function(t){var n=this.__data__;return r?void 0!==n[t]:o.call(n,t)}},function(t,n,e){var r=e(16);t.exports=function(t,n){var e=this.__data__;return this.size+=this.has(t)?0:1,e[t]=r&&void 0===n?"__lodash_hash_undefined__":n,this}},function(t,n,e){var r=e(17);t.exports=function(t){var n=r(this,t).delete(t);return this.size-=n?1:0,n}},function(t,n){t.exports=function(t){var n=typeof t;return"string"==n||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==t:null===t}},function(t,n,e){var r=e(17);t.exports=function(t){return r(this,t).get(t)}},function(t,n,e){var r=e(17);t.exports=function(t){return r(this,t).has(t)}},function(t,n,e){var r=e(17);t.exports=function(t,n){var e=r(this,t),o=e.size;return e.set(t,n),this.size+=e.size==o?0:1,this}},function(t,n,e){var r=e(108)();t.exports=r},function(t,n){t.exports=function(t){return function(n,e,r){for(var o=-1,i=Object(n),u=r(n),a=u.length;a--;){var c=u[t?a:++o];if(!1===e(i[c],c,i))break}return n}}},function(t,n,e){var r=e(42),o=e(44),i=e(45),u=e(23),a=e(46),c=e(22),f=e(7),s=e(112),l=e(30),p=e(0),d=e(4),h=e(114),v=e(49),y=e(50),w=e(116);t.exports=function(t,n,e,m,b,g,x){var _=y(t,e),j=y(n,e),E=x.get(j);if(E)r(t,e,E);else{var O=g?g(_,j,e+"",t,n,x):void 0,P=void 0===O;if(P){var S=f(j),A=!S&&l(j),T=!S&&!A&&v(j);O=j,S||A||T?f(_)?O=_:s(_)?O=u(_):A?(P=!1,O=o(j,!0)):T?(P=!1,O=i(j,!0)):O=[]:h(j)||c(j)?(O=_,c(_)?O=w(_):d(_)&&!p(_)||(O=a(j))):P=!1}P&&(x.set(j,O),b(O,j,m,g,x),x.delete(j)),r(t,e,O)}}},function(t,n,e){var r=e(2).Uint8Array;t.exports=r},function(t,n,e){var r=e(4),o=Object.create,i=function(){function t(){}return function(n){if(!r(n))return{};if(o)return o(n);t.prototype=n;var e=new t;return t.prototype=void 0,e}}();t.exports=i},function(t,n,e){var r=e(18),o=e(5);t.exports=function(t){return o(t)&&r(t)}},function(t,n){t.exports=function(){return!1}},function(t,n,e){var r=e(9),o=e(28),i=e(5),u=Function.prototype,a=Object.prototype,c=u.toString,f=a.hasOwnProperty,s=c.call(Object);t.exports=function(t){if(!i(t)||"[object Object]"!=r(t))return!1;var n=o(t);if(null===n)return!0;var e=f.call(n,"constructor")&&n.constructor;return"function"==typeof e&&e instanceof e&&c.call(e)==s}},function(t,n,e){var r=e(9),o=e(48),i=e(5),u={};u["[object Float32Array]"]=u["[object Float64Array]"]=u["[object Int8Array]"]=u["[object Int16Array]"]=u["[object Int32Array]"]=u["[object Uint8Array]"]=u["[object Uint8ClampedArray]"]=u["[object Uint16Array]"]=u["[object Uint32Array]"]=!0,u["[object Arguments]"]=u["[object Array]"]=u["[object ArrayBuffer]"]=u["[object Boolean]"]=u["[object DataView]"]=u["[object Date]"]=u["[object Error]"]=u["[object Function]"]=u["[object Map]"]=u["[object Number]"]=u["[object Object]"]=u["[object RegExp]"]=u["[object Set]"]=u["[object String]"]=u["[object WeakMap]"]=!1,t.exports=function(t){return i(t)&&o(t.length)&&!!u[r(t)]}},function(t,n,e){var r=e(11),o=e(19);t.exports=function(t){return r(t,o(t))}},function(t,n){t.exports=function(t,n){for(var e=-1,r=Array(t);++e<t;)r[e]=n(e);return r}},function(t,n,e){var r=e(4),o=e(29),i=e(119),u=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return i(t);var n=o(t),e=[];for(var a in t)("constructor"!=a||!n&&u.call(t,a))&&e.push(a);return e}},function(t,n){t.exports=function(t){var n=[];if(null!=t)for(var e in Object(t))n.push(e);return n}},function(t,n,e){var r=e(121),o=e(128);t.exports=function(t){return r((function(n,e){var r=-1,i=e.length,u=i>1?e[i-1]:void 0,a=i>2?e[2]:void 0;for(u=t.length>3&&"function"==typeof u?(i--,u):void 0,a&&o(e[0],e[1],a)&&(u=i<3?void 0:u,i=1),n=Object(n);++r<i;){var c=e[r];c&&t(n,c,r,u)}return n}))}},function(t,n,e){var r=e(54),o=e(122),i=e(124);t.exports=function(t,n){return i(o(t,n,r),t+"")}},function(t,n,e){var r=e(123),o=Math.max;t.exports=function(t,n,e){return n=o(void 0===n?t.length-1:n,0),function(){for(var i=arguments,u=-1,a=o(i.length-n,0),c=Array(a);++u<a;)c[u]=i[n+u];u=-1;for(var f=Array(n+1);++u<n;)f[u]=i[u];return f[n]=e(c),r(t,this,f)}}},function(t,n){t.exports=function(t,n,e){switch(e.length){case 0:return t.call(n);case 1:return t.call(n,e[0]);case 2:return t.call(n,e[0],e[1]);case 3:return t.call(n,e[0],e[1],e[2])}return t.apply(n,e)}},function(t,n,e){var r=e(125),o=e(127)(r);t.exports=o},function(t,n,e){var r=e(126),o=e(43),i=e(54),u=o?function(t,n){return o(t,"toString",{configurable:!0,enumerable:!1,value:r(n),writable:!0})}:i;t.exports=u},function(t,n){t.exports=function(t){return function(){return t}}},function(t,n){var e=Date.now;t.exports=function(t){var n=0,r=0;return function(){var o=e(),i=16-(o-r);if(r=o,i>0){if(++n>=800)return arguments[0]}else n=0;return t.apply(void 0,arguments)}}},function(t,n,e){var r=e(15),o=e(18),i=e(53),u=e(4);t.exports=function(t,n,e){if(!u(e))return!1;var a=typeof n;return!!("number"==a?o(e)&&i(n,e.length):"string"==a&&n in e)&&r(e[n],t)}},function(t,n){t.exports=function(t){if(Array.isArray(t))return t}},function(t,n){t.exports=function(t,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var e=[],r=!0,o=!1,i=void 0;try{for(var u,a=t[Symbol.iterator]();!(r=(u=a.next()).done)&&(e.push(u.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}return e}}},function(t,n,e){var r=e(132);t.exports=function(t,n){if(t){if("string"==typeof t)return r(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?r(t,n):void 0}}},function(t,n){t.exports=function(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}},function(t,n){t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},function(t,n,e){var r=e(135),o=e(138),i=e(143),u=e(144),a=e(145),c=e(56);t.exports=function(t,n,e){var f=-1,s=o,l=t.length,p=!0,d=[],h=d;if(e)p=!1,s=i;else if(l>=200){var v=n?null:a(t);if(v)return c(v);p=!1,s=u,h=new r}else h=n?[]:d;t:for(;++f<l;){var y=t[f],w=n?n(y):y;if(y=e||0!==y?y:0,p&&w==w){for(var m=h.length;m--;)if(h[m]===w)continue t;n&&h.push(w),d.push(y)}else s(h,w,e)||(h!==d&&h.push(w),d.push(y))}return d}},function(t,n,e){var r=e(41),o=e(136),i=e(137);function u(t){var n=-1,e=null==t?0:t.length;for(this.__data__=new r;++n<e;)this.add(t[n])}u.prototype.add=u.prototype.push=o,u.prototype.has=i,t.exports=u},function(t,n){t.exports=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this}},function(t,n){t.exports=function(t){return this.__data__.has(t)}},function(t,n,e){var r=e(139);t.exports=function(t,n){return!!(null==t?0:t.length)&&r(t,n,0)>-1}},function(t,n,e){var r=e(140),o=e(141),i=e(142);t.exports=function(t,n,e){return n==n?i(t,n,e):r(t,o,e)}},function(t,n){t.exports=function(t,n,e,r){for(var o=t.length,i=e+(r?1:-1);r?i--:++i<o;)if(n(t[i],i,t))return i;return-1}},function(t,n){t.exports=function(t){return t!=t}},function(t,n){t.exports=function(t,n,e){for(var r=e-1,o=t.length;++r<o;)if(t[r]===n)return r;return-1}},function(t,n){t.exports=function(t,n,e){for(var r=-1,o=null==t?0:t.length;++r<o;)if(e(n,t[r]))return!0;return!1}},function(t,n){t.exports=function(t,n){return t.has(n)}},function(t,n,e){var r=e(55),o=e(3),i=e(56),u=r&&1/i(new r([,-0]))[1]==1/0?function(t){return new r(t)}:o;t.exports=u},function(t,n,e){var r=e(39),o=e(147),i=e(51),u=e(148),a=e(151),c=e(44),f=e(23),s=e(152),l=e(154),p=e(155),d=e(156),h=e(35),v=e(160),y=e(161),w=e(46),m=e(7),b=e(30),g=e(165),x=e(4),_=e(167),j=e(33),E={};E["[object Arguments]"]=E["[object Array]"]=E["[object ArrayBuffer]"]=E["[object DataView]"]=E["[object Boolean]"]=E["[object Date]"]=E["[object Float32Array]"]=E["[object Float64Array]"]=E["[object Int8Array]"]=E["[object Int16Array]"]=E["[object Int32Array]"]=E["[object Map]"]=E["[object Number]"]=E["[object Object]"]=E["[object RegExp]"]=E["[object Set]"]=E["[object String]"]=E["[object Symbol]"]=E["[object Uint8Array]"]=E["[object Uint8ClampedArray]"]=E["[object Uint16Array]"]=E["[object Uint32Array]"]=!0,E["[object Error]"]=E["[object Function]"]=E["[object WeakMap]"]=!1,t.exports=function t(n,e,O,P,S,A){var T,M=1&e,L=2&e,I=4&e;if(O&&(T=S?O(n,P,S,A):O(n)),void 0!==T)return T;if(!x(n))return n;var N=m(n);if(N){if(T=v(n),!M)return f(n,T)}else{var U=h(n),D="[object Function]"==U||"[object GeneratorFunction]"==U;if(b(n))return c(n,M);if("[object Object]"==U||"[object Arguments]"==U||D&&!S){if(T=L||D?{}:w(n),!M)return L?l(n,a(T,n)):s(n,u(T,n))}else{if(!E[U])return S?n:{};T=y(n,U,M)}}A||(A=new r);var C=A.get(n);if(C)return C;A.set(n,T),_(n)?n.forEach((function(r){T.add(t(r,e,O,r,n,A))})):g(n)&&n.forEach((function(r,o){T.set(o,t(r,e,O,o,n,A))}));var R=I?L?d:p:L?keysIn:j,k=N?void 0:R(n);return o(k||n,(function(r,o){k&&(r=n[o=r]),i(T,o,t(r,e,O,o,n,A))})),T}},function(t,n){t.exports=function(t,n){for(var e=-1,r=null==t?0:t.length;++e<r&&!1!==n(t[e],e,t););return t}},function(t,n,e){var r=e(11),o=e(33);t.exports=function(t,n){return t&&r(n,o(n),t)}},function(t,n,e){var r=e(29),o=e(150),i=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return o(t);var n=[];for(var e in Object(t))i.call(t,e)&&"constructor"!=e&&n.push(e);return n}},function(t,n,e){var r=e(47)(Object.keys,Object);t.exports=r},function(t,n,e){var r=e(11),o=e(19);t.exports=function(t,n){return t&&r(n,o(n),t)}},function(t,n,e){var r=e(11),o=e(34);t.exports=function(t,n){return r(t,o(t),n)}},function(t,n){t.exports=function(t,n){for(var e=-1,r=null==t?0:t.length,o=0,i=[];++e<r;){var u=t[e];n(u,e,t)&&(i[o++]=u)}return i}},function(t,n,e){var r=e(11),o=e(58);t.exports=function(t,n){return r(t,o(t),n)}},function(t,n,e){var r=e(59),o=e(34),i=e(33);t.exports=function(t){return r(t,i,o)}},function(t,n,e){var r=e(59),o=e(58),i=e(19);t.exports=function(t){return r(t,i,o)}},function(t,n,e){var r=e(8)(e(2),"DataView");t.exports=r},function(t,n,e){var r=e(8)(e(2),"Promise");t.exports=r},function(t,n,e){var r=e(8)(e(2),"WeakMap");t.exports=r},function(t,n){var e=Object.prototype.hasOwnProperty;t.exports=function(t){var n=t.length,r=new t.constructor(n);return n&&"string"==typeof t[0]&&e.call(t,"index")&&(r.index=t.index,r.input=t.input),r}},function(t,n,e){var r=e(27),o=e(162),i=e(163),u=e(164),a=e(45);t.exports=function(t,n,e){var c=t.constructor;switch(n){case"[object ArrayBuffer]":return r(t);case"[object Boolean]":case"[object Date]":return new c(+t);case"[object DataView]":return o(t,e);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return a(t,e);case"[object Map]":return new c;case"[object Number]":case"[object String]":return new c(t);case"[object RegExp]":return i(t);case"[object Set]":return new c;case"[object Symbol]":return u(t)}}},function(t,n,e){var r=e(27);t.exports=function(t,n){var e=n?r(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.byteLength)}},function(t,n){var e=/\w*$/;t.exports=function(t){var n=new t.constructor(t.source,e.exec(t));return n.lastIndex=t.lastIndex,n}},function(t,n,e){var r=e(10),o=r?r.prototype:void 0,i=o?o.valueOf:void 0;t.exports=function(t){return i?Object(i.call(t)):{}}},function(t,n,e){var r=e(166),o=e(31),i=e(32),u=i&&i.isMap,a=u?o(u):r;t.exports=a},function(t,n,e){var r=e(35),o=e(5);t.exports=function(t){return o(t)&&"[object Map]"==r(t)}},function(t,n,e){var r=e(168),o=e(31),i=e(32),u=i&&i.isSet,a=u?o(u):r;t.exports=a},function(t,n,e){var r=e(35),o=e(5);t.exports=function(t){return o(t)&&"[object Set]"==r(t)}},function(t,n,e){"use strict";e.r(n);var r=e(3),o=e.n(r);var i=function(){return(i=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var o in n=arguments[e])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t}).apply(this,arguments)};function u(t,n){var e={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&n.indexOf(r)<0&&(e[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(t);o<r.length;o++)n.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(t,r[o])&&(e[r[o]]=t[r[o]])}return e}function a(t,n,e,r){return new(e||(e=Promise))((function(o,i){function u(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,a)}c((r=r.apply(t,n||[])).next())}))}function c(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}function f(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,i=e.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return u}function s(){for(var t=[],n=0;n<arguments.length;n++)t=t.concat(f(arguments[n]));return t}var l=e(1),p=e(20),d=e.n(p),h=e(21),v=e.n(h);function y(t){return(y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var w,m,b,g=e(61),x=e.n(g),_="undefined"!=typeof navigator&&-1!==navigator.userAgent.indexOf("Trident");function j(t,n){if(!t.hasOwnProperty(n)||!isNaN(n)&&n<t.length)return!0;if(!_)return!1;try{return t[n]&&t[n].parent===window}catch(t){return!0}}function E(t){var n,e=0,r=!1;for(var o in t)if(!j(t,o)){for(var i=0;i<window.frames.length&&!r;i++){if(window.frames[i]===t[o]){r=!0;break}}if(!r&&(0===e&&o!==w||1===e&&o!==m))return o;e++,n=o}if(n!==b)return n}function O(t){for(var n in w=m=void 0,t)j(t,n)||(w?m||(m=n):w=n,b=n);return b}function P(t){var n=t.indexOf(">")+1,e=t.lastIndexOf("<");return t.substring(n,e)}function S(t){try{var n=new URL(t.startsWith("//")?"".concat(location.protocol).concat(t):t,location.href),e=n.origin,r=n.pathname.split("/");return r.pop(),"".concat(e).concat(r.join("/"),"/")}catch(t){return console.warn(t),""}}var A=window.requestIdleCallback||function(t){var n=Date.now();return setTimeout((function(){t({didTimeout:!1,timeRemaining:function(){return Math.max(0,50-(Date.now()-n))}})}),1)},T=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,M=/<(script)[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+((?!type=('|')text\/ng\x2Dtemplate\3)[\s\S])*?>[\s\S]*?<\/\1>/i,L=/.*\ssrc=('|")?([^>'"\s]+)/,I=/.*\sentry\s*.*/,N=/.*\sasync\s*.*/,U=/.*\snomodule\s*.*/,D=/.*\stype=('|")?module('|")?\s*.*/,C=/<(link)\s+.*?>/gi,R=/.*ignore\s*.*/,k=/\srel=('|")?(preload|prefetch)\1/,H=/.*\shref=('|")?([^>'"\s]+)/,B=/<style[^>]*>[\s\S]*?<\/style>/gi,G=/\s+rel=('|")?stylesheet\1.*/,W=/.*\shref=('|")?([^>'"\s]+)/,z=/<style(\s+|\s+.+\s+)ignore(\s*|\s+.*)>/i,q=/<!--([\s\S]*?)-->/g,F=/<script(\s+|\s+.+\s+)ignore(\s*|\s+.*)>/i;function V(t){return t.startsWith("//")||t.startsWith("http://")||t.startsWith("https://")}function $(t,n){return new URL(t,n).toString()}var K=function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return"\x3c!-- ".concat(n?"prefetch/preload":""," link ").concat(t," replaced by import-html-entry --\x3e")},Y=function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return"\x3c!-- ".concat(n?"async":""," script ").concat(t," replaced by import-html-entry --\x3e")},Z=function(t){return"\x3c!-- ignore asset ".concat(t||"file"," replaced by import-html-entry --\x3e")},J=function(t,n){return"\x3c!-- ".concat(n?"nomodule":"module"," script ").concat(t," ignored by import-html-entry --\x3e")};function Q(t,n){var e=[],r=[],o=null,i="noModule"in document.createElement("script");return{template:t.replace(q,"").replace(C,(function(t){if(!!t.match(G)){var e=t.match(W),o=t.match(R);if(e){var i=e&&e[2],u=i;return i&&!V(i)&&(u=$(i,n)),o?Z(u):(r.push(u),K(u))}}if(t.match(k)&&t.match(H)){var a=t.match(H),c=x()(a,3)[2];return K(c,!0)}return t})).replace(B,(function(t){return z.test(t)?Z("style file"):t})).replace(T,(function(t){var r=t.match(F),u=i&&!!t.match(U)||!i&&!!t.match(D);if(M.test(t)&&t.match(L)){var a=t.match(I),c=t.match(L),f=c&&c[2];if(o&&a)throw new SyntaxError("You should not set multiply entry script!");if(f&&!V(f)&&(f=$(f,n)),o=o||a&&f,r)return Z(f||"js file");if(u)return J(f||"js file",i);if(f){var s=!!t.match(N);return e.push(s?{async:!0,src:f}:f),Y(f,s)}return t}return r?Z("js file"):u?J("js file",i):(P(t).split(/[\r\n]+/).every((function(t){return!t.trim()||t.trim().startsWith("//")}))||e.push(t),"\x3c!-- inline scripts replaced by import-html-entry --\x3e")})),scripts:e=e.filter((function(t){return!!t})),styles:r,entry:o||e[e.length-1]}}var X={},tt={},nt={};if(!window.fetch)throw new Error('[import-html-entry] Here is no "fetch" on the window env, you need to polyfill it');var et=window.fetch.bind(window);function rt(t){return t}function ot(t,n){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=e.fetch,o=void 0===r?et:r,i=t;return at(n,o).then((function(t){return i=n.reduce((function(n,e,r){return n=n.replace(K(e),"<style>/* ".concat(e," */").concat(t[r],"</style>"))}),i)}))}var it=function(t){return t.startsWith("<")};function ut(t,n,e,r){var o=it(t)?"":"//# sourceURL=".concat(t,"\n");return window.proxy=e,r?";(function(window, self){with(window){;".concat(n,"\n").concat(o,"}}).bind(window.proxy)(window.proxy, window.proxy);"):";(function(window, self){;".concat(n,"\n").concat(o,"}).bind(window.proxy)(window.proxy, window.proxy);")}function at(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:et;return Promise.all(t.map((function(t){return it(t)?P(t):X[t]||(X[t]=n(t).then((function(t){return t.text()})))})))}function ct(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:et,e=function(t){return tt[t]||(tt[t]=n(t).then((function(t){return t.text()})))};return Promise.all(t.map((function(t){if("string"==typeof t)return it(t)?P(t):e(t);var n=t.src;return t.async?{src:n,async:!0,content:new Promise((function(t,r){return A((function(){return e(n).then(t,r)}))}))}:e(n)})))}"undefined"!=typeof performance&&"function"==typeof performance.mark&&"function"==typeof performance.clearMarks&&"function"==typeof performance.measure&&performance.clearMeasures;function ft(t,n){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:window,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=r.fetch,i=void 0===o?et:o,u=r.strictGlobal,a=void 0!==u&&u;return ct(n,i).then((function(r){var o=eval;function i(u,c){u<n.length&&(!function(n,r,i){"Evaluating script ".concat(n),"Evaluating Time Consuming: ".concat(n),n===t?(O(a?e:window),o(ut(n,r,e,a)),i(e[E(a?e:window)]||{})):"string"==typeof r?o(ut(n,r,e,a)):r.async&&(null==r||r.content.then((function(t){return o(ut(r.src,t,e,a))})).catch((function(t){throw console.error("error occurs while executing async script ".concat(r.src)),t})))}(n[u],r[u],c),t||u!==n.length-1?i(u+1,c):c())}return new Promise((function(t){return i(0,t)}))}))}function st(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=et,r=S,o=rt;return"function"==typeof n?e=n:(e=n.fetch||et,r=n.getPublicPath||n.getDomain||S,o=n.getTemplate||rt),nt[t]||(nt[t]=e(t).then((function(t){return t.text()})).then((function(n){var i=r(t),u=Q(o(n),i),a=u.template,c=u.scripts,f=u.entry,s=u.styles;return ot(a,s,{fetch:e}).then((function(t){return{template:t,assetPublicPath:i,getExternalScripts:function(){return ct(c,e)},getExternalStyleSheets:function(){return at(s,e)},execScripts:function(t,n){return c.length?ft(f,c,t,{fetch:e,strictGlobal:n}):Promise.resolve()}}}))})))}function lt(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.fetch,r=void 0===e?et:e,o=n.getTemplate,i=void 0===o?rt:o,u=n.getPublicPath||n.getDomain||S;if(!t)throw new SyntaxError("entry should not be empty!");if("string"==typeof t)return st(t,{fetch:r,getPublicPath:u,getTemplate:i});if(Array.isArray(t.scripts)||Array.isArray(t.styles)){var a=t.scripts,c=void 0===a?[]:a,f=t.styles,s=void 0===f?[]:f,l=t.html,p=void 0===l?"":l,d=function(t){return s.reduceRight((function(t,n){return"".concat(K(n)).concat(t)}),t)},h=function(t){return c.reduce((function(t,n){return"".concat(t).concat(Y(n))}),t)};return ot(i(h(d(p))),s,{fetch:r}).then((function(t){return{template:t,assetPublicPath:u("/"),getExternalScripts:function(){return ct(c,r)},getExternalStyleSheets:function(){return at(s,r)},execScripts:function(t,n){return c.length?ft(c[c.length-1],c,t,{fetch:r,strictGlobal:n}):Promise.resolve()}}}))}throw new SyntaxError("entry scripts or styles should be array!")}var pt=window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__||"/";function dt(t,n){return v()({},function(t,n){void 0===n&&(n="/");var e=!1;return{beforeLoad:function(){return a(this,void 0,void 0,(function(){return c(this,(function(e){return t.__INJECTED_PUBLIC_PATH_BY_QIANKUN__=n,[2]}))}))},beforeMount:function(){return a(this,void 0,void 0,(function(){return c(this,(function(r){return e&&(t.__INJECTED_PUBLIC_PATH_BY_QIANKUN__=n),[2]}))}))},beforeUnmount:function(){return a(this,void 0,void 0,(function(){return c(this,(function(n){return void 0===pt?delete t.__INJECTED_PUBLIC_PATH_BY_QIANKUN__:t.__INJECTED_PUBLIC_PATH_BY_QIANKUN__=pt,e=!0,[2]}))}))}}}(t,n),(function(t,n){return d()(null!=t?t:[],null!=n?n:[])}))}var ht=e(6),vt=e.n(ht),yt={},wt={};function mt(t,n){Object.keys(wt).forEach((function(e){wt[e]instanceof Function&&wt[e](vt()(t),vt()(n))}))}function bt(t,n){return{onGlobalStateChange:function(n,e){if(n instanceof Function){wt[t]&&console.warn("[qiankun] '"+t+"' gloabal listener already exists before this, new listener will overwrite it."),wt[t]=n;var r=vt()(yt);e&&n(r,r)}else console.error("[qiankun] callback must be function!")},setGlobalState:function(t){if(void 0===t&&(t={}),t===yt)return console.warn("[qiankun] state has not changed！"),!1;var e=[],r=vt()(yt);return yt=vt()(Object.keys(t).reduce((function(r,o){var i;return n||o in r?(e.push(o),Object.assign(r,((i={})[o]=t[o],i))):(console.warn("[qiankun] '"+o+"' not declared when init state！"),r)}),yt)),0===e.length?(console.warn("[qiankun] state has not changed！"),!1):(mt(yt,r),!0)},offGlobalStateChange:function(){return delete wt[t],!0}}}var gt=e(0),xt=e.n(gt),_t=e(60),jt=e.n(_t);function Et(t){return Array.isArray(t)?t:[t]}function Ot(t){return t.prototype&&Object.getOwnPropertyNames(t.prototype).filter((function(t){return"constructor"!==t})).length||/^function\b\s[A-Z].*/.test(t.toString())||/^class\b/.test(t.toString())}function Pt(t){return"__qiankun_microapp_wrapper_for_"+jt()(t)+"__"}function St(t){var n=null!=t?t:{},e=n.bootstrap,r=n.mount,o=n.unmount;return xt()(e)&&xt()(r)&&xt()(o)}var At=function(){var t=this;this.promise=new Promise((function(n,e){t.resolve=n,t.reject=e}))};function Tt(t,n,e){void 0===n&&e?delete window[t]:function(t,n){var e=Object.getOwnPropertyDescriptor(t,n);return!e||e.configurable}(window,t)&&"symbol"!==y(t)&&(Object.defineProperty(window,t,{writable:!0,configurable:!0}),window[t]=n)}var Mt=function(){function t(t){this.addedPropsMapInSandbox=new Map,this.modifiedPropsOriginalValueMapInSandbox=new Map,this.currentUpdatedPropsValueMap=new Map,this.sandboxRunning=!0,this.name=t;var n=this.sandboxRunning,e=this.addedPropsMapInSandbox,r=this.modifiedPropsOriginalValueMapInSandbox,o=this.currentUpdatedPropsValueMap,i=Symbol("bound value"),u=window,a=Object.create(null),c=new Proxy(a,{set:function(t,i,a){if(n){if(u.hasOwnProperty(i)){if(!r.has(i)){var c=u[i];r.set(i,c)}}else e.set(i,a);return o.set(i,a),u[i]=a,!0}return!0},get:function(t,n){if("top"===n||"window"===n||"self"===n)return c;var e=u[n];if("function"==typeof e&&!Ot(e)){if(e[i])return e[i];var r=e.bind(u);return Object.keys(e).forEach((function(t){return r[t]=e[t]})),Object.defineProperty(e,i,{enumerable:!1,value:r}),r}return e},has:function(t,n){return n in u}});this.proxy=c}return t.prototype.active=function(){this.sandboxRunning||this.currentUpdatedPropsValueMap.forEach((function(t,n){return Tt(n,t)})),this.sandboxRunning=!0},t.prototype.inactive=function(){this.modifiedPropsOriginalValueMapInSandbox.forEach((function(t,n){return Tt(n,t)})),this.addedPropsMapInSandbox.forEach((function(t,n){return Tt(n,void 0,!0)})),this.sandboxRunning=!1},t}(),Lt=Symbol("bound value");function It(t,n){if("function"==typeof n&&!Ot(n)){if(n[Lt])return n[Lt];var e=n.bind(t);return Object.keys(n).forEach((function(t){return e[t]=n[t]})),Object.defineProperty(n,Lt,{enumerable:!1,value:e}),e}return n}var Nt=new Map;var Ut="Symbol(attach-proxy-qiankun)",Dt=HTMLHeadElement.prototype.appendChild,Ct=HTMLHeadElement.prototype.insertBefore,Rt=HTMLHeadElement.prototype.removeChild,kt=HTMLElement.prototype.appendChild,Ht=HTMLElement.prototype.removeChild;function Bt(t){var n,e;return!t.textContent&&((null===(n=t.sheet)||void 0===n?void 0:n.cssRules.length)||(null===(e=Gt(t))||void 0===e?void 0:e.length))}function Gt(t){return t["Symbol(styled-component-qiankun)"]}var Wt=0;function zt(t,n,e,r,o){void 0===r&&(r=!0),void 0===o&&(o=!0);var u=[];return o||function(t,n,e){var r,o=Nt.get(t)||{};Nt.set(t,i(i({},o),((r={})[n]=e,r)))}(e,"document",(function(){return new Proxy(document,{get:function(r,o){return"createElement"===o?function(r,o){var i=document.createElement(r,o);return"style"!==(null==r?void 0:r.toLowerCase())&&"script"!==(null==r?void 0:r.toLowerCase())||Object.defineProperty(i,Ut,{value:{appName:t,proxy:e,appWrapperGetter:n,dynamicStyleSheetElements:u},enumerable:!1}),i}:It(document,r[o])},set:function(t,n,e){return t[n]=e,!0}})})),HTMLHeadElement.prototype.appendChild===Dt&&(HTMLHeadElement.prototype.appendChild=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){var e=n;if(e.tagName){var r=f(t,5),o=r[0],i=r[1],u=r[2],a=r[3],c=r[4],s=e[Ut];s&&(a=s.singular,i=s.appWrapperGetter,c=s.dynamicStyleSheetElements,u=s.proxy);var p=s&&!a;switch(e.tagName){case"LINK":case"STYLE":var d=n;return p||Object(l.a)(window.location).some((function(t){return t===o}))?(c.push(d),kt.call(i(),d)):Dt.call(this,e);case"SCRIPT":if(!p)return kt.call(this,e);var h=e,v=h.src,y=h.text,w=bn.fetch;if(v){ft(null,[v],u,{fetch:w,strictGlobal:!a}).then((function(){var t=new CustomEvent("load");xt()(e.onload)?e.onload(t):e.dispatchEvent(t)}),(function(){var t=new CustomEvent("error");xt()(e.onerror)?e.onerror(t):e.dispatchEvent(t)}));var m=document.createComment("dynamic script "+v+" replaced by qiankun");return kt.call(i(),m)}ft(null,["<script>"+y+"<\/script>"],u,{strictGlobal:!a}).then(e.onload,e.onerror);var b=document.createComment("dynamic inline script replaced by qiankun");return kt.call(i(),b)}}return Dt.call(this,e)}}(t,n,e,o,u)),HTMLHeadElement.prototype.removeChild===Rt&&(HTMLHeadElement.prototype.removeChild=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){var e=f(t,1)[0],r=n[Ut];r&&(e=r.appWrapperGetter);try{var o=e();if(o.contains(n))return Ht.call(o,n)}catch(t){console.warn(t)}return Rt.call(this,n)}}(n)),HTMLHeadElement.prototype.insertBefore===Ct&&(HTMLHeadElement.prototype.insertBefore=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n,e){var r=n;if(r.tagName){var o=f(t,4),i=o[0],u=o[1],a=o[2],c=o[3],s=r[Ut];switch(s&&(a=s.singular,u=s.appWrapperGetter,c=s.dynamicStyleSheetElements),r.tagName){case"LINK":case"STYLE":var p=n;return s&&!a?(c.push(p),kt.call(u(),p)):Object(l.a)(window.location).some((function(t){return t===i}))?(c.push(p),Ct.call(u(),p,e)):Ct.call(this,r,e)}}return Ct.call(this,r,e)}}(t,n,o,u)),Wt++,function(){return 0===--Wt&&(HTMLHeadElement.prototype.appendChild=Dt,HTMLHeadElement.prototype.insertBefore=Ct,HTMLHeadElement.prototype.removeChild=Rt),u.forEach((function(t){var n,e;t instanceof HTMLStyleElement&&Bt(t)&&t.sheet&&(n=t,e=t.sheet.cssRules,Object.defineProperty(n,"Symbol(styled-component-qiankun)",{value:e,configurable:!0,enumerable:!1}))})),function(){u.forEach((function(t){if(document.head.appendChild.call(n(),t),t instanceof HTMLStyleElement&&Bt(t)){var e=Gt(t);if(e)for(var r=0;r<e.length;r++){var o=e[r];t.sheet.insertRule(o.cssText)}}})),r&&(u=[])}}}var qt=window.setInterval,Ft=window.clearInterval;var Vt=window.addEventListener,$t=window.removeEventListener;var Kt=e(62),Yt=e.n(Kt);var Zt=Object.defineProperty;var Jt=0,Qt=function(){function t(t){this.updateValueMap=new Map,this.sandboxRunning=!0,this.name=t;var n=this.sandboxRunning,e=this.updateValueMap,r=window,o=function(t){var n={};return Object.getOwnPropertyNames(t).filter((function(n){var e=Object.getOwnPropertyDescriptor(t,n);return!(null==e?void 0:e.configurable)})).forEach((function(e){var r=Object.getOwnPropertyDescriptor(t,e);r&&("top"!==e&&"self"!==e&&"window"!==e||(r.configurable=!0,Object.prototype.hasOwnProperty.call(r,"get")||(r.writable=!0)),Zt(n,e,Object.freeze(r)))})),n}(r),i=new Proxy(o,{set:function(t,r,o){return!n||(e.set(r,o),function(t,n){"System"===t&&(window.System=n),"__cjsWrapper"===t&&(window.__cjsWrapper=n)}(r,o),!0)},get:function(t,n){if("top"===n||"window"===n||"self"===n)return i;if("eval"===n)return eval;if("hasOwnProperty"===n)return function(t){return e.has(t)||r.hasOwnProperty(t)};var o=function(t,n){return(Nt.get(t)||{})[n]}(i,n);if(o)return o();var u=e.get(n)||r[n];return It(r,u)},has:function(t,n){return e.has(n)||n in r},getOwnPropertyDescriptor:function(t,n){if(e.has(n)){var o=Object.getOwnPropertyDescriptor(r,n);return o||{configurable:!0,enumerable:!0,writable:!0,value:e.get(n)}}return t.hasOwnProperty(n)?Object.getOwnPropertyDescriptor(t,n):r.hasOwnProperty(n)?Object.getOwnPropertyDescriptor(r,n):void 0},ownKeys:function(){return Yt()(s(Reflect.ownKeys(r),e.keys()))},deleteProperty:function(t,n){return!e.has(n)||(e.delete(n),!0)}});this.proxy=i}return t.prototype.active=function(){this.sandboxRunning=!0,Jt++},t.prototype.inactive=function(){var t;t=this.updateValueMap,0==--Jt&&(t.has("System")&&delete window.System,t.has("__cjsWrapper")&&delete window.__cjsWrapper),this.sandboxRunning=!1},t}();function Xt(t,n){for(var e in t)t.hasOwnProperty(e)&&n(e)}var tn=function(){function t(t){this.sandboxRunning=!1,this.modifyPropsMap={},this.name=t,this.proxy=window,this.active()}return t.prototype.active=function(){var t=this;this.sandboxRunning||(this.windowSnapshot={},Xt(window,(function(n){t.windowSnapshot[n]=window[n]})),Object.keys(this.modifyPropsMap).forEach((function(n){window[n]=t.modifyPropsMap[n]})),this.sandboxRunning=!0)},t.prototype.inactive=function(){var t=this;this.modifyPropsMap={},Xt(window,(function(n){window[n]!==t.windowSnapshot[n]&&(t.modifyPropsMap[n]=window[n],window[n]=t.windowSnapshot[n])})),this.sandboxRunning=!1},t}();function nn(t,n,e){var r,i=[],u=[];r=window.Proxy?e?new Mt(t):new Qt(t):new tn(t);var f=function(t,n,e,r){return[zt(t,n,e,!1,r)]}(t,n,r.proxy,e);return{proxy:r.proxy,mount:function(){return a(this,void 0,void 0,(function(){var a,l;return c(this,(function(c){return a=u.slice(0,f.length),l=u.slice(f.length),a.length&&a.forEach((function(t){return t()})),r.active(),i=function(t,n,e,r){return[(f=[],window.clearInterval=function(t){return f=f.filter((function(n){return n!==t})),Ft(t)},window.setInterval=function(t,n){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var o=qt.apply(void 0,s([t,n],e));return f=s(f,[o]),o},function(){return f.forEach((function(t){return window.clearInterval(t)})),window.setInterval=qt,window.clearInterval=Ft,o.a}),(c=new Map,window.addEventListener=function(t,n,e){var r=c.get(t)||[];return c.set(t,s(r,[n])),Vt.call(window,t,n,e)},window.removeEventListener=function(t,n,e){var r=c.get(t);return r&&r.length&&-1!==r.indexOf(n)&&r.splice(r.indexOf(n),1),$t.call(window,t,n,e)},function(){return c.forEach((function(t,n){return s(t).forEach((function(t){return window.removeEventListener(n,t)}))})),window.addEventListener=Vt,window.removeEventListener=$t,o.a}),(i=function(t){return o.a},u=[],a=[],window.g_history&&xt()(window.g_history.listen)&&(i=window.g_history.listen.bind(window.g_history),window.g_history.listen=function(t){u.push(t);var n=i(t);return a.push(n),function(){n(),a.splice(a.indexOf(n),1),u.splice(u.indexOf(t),1)}}),function(){var t=o.a;return u.length&&(t=function(){u.forEach((function(t){return window.g_history.listen(t)}))}),a.forEach((function(t){return t()})),window.g_history&&xt()(window.g_history.listen)&&(window.g_history.listen=i),t}),zt(t,n,e,!0,r)];var i,u,a,c,f}(t,n,r.proxy,e),l.length&&l.forEach((function(t){return t()})),u=[],[2]}))}))},unmount:function(){return a(this,void 0,void 0,(function(){return c(this,(function(t){return u=s(f,i).map((function(t){return t()})),r.inactive(),[2]}))}))}}}function en(t,n){if(!t){if(n)throw new Error(n);throw new Error("[qiankun] element not existed!")}}function rn(t,n){return t.length?t.reduce((function(t,e){return t.then((function(){return e(n)}))}),Promise.resolve()):Promise.resolve()}function on(t,n){return a(this,void 0,void 0,(function(){return c(this,(function(e){return[2,"function"==typeof t?t(n):!!t]}))}))}var un=document.head.attachShadow||document.head.createShadowRoot;function an(t,n){var e=document.createElement("div");e.innerHTML=t;var r=e.firstChild;if(n)if(un){var o=r.innerHTML;r.innerHTML="",r.attachShadow({mode:"open"}).innerHTML=o}else console.warn("[qiankun]: As current browser not support shadow dom, your strictStyleIsolation configuration will be ignored!");return r}var cn,fn=HTMLElement.prototype.appendChild,sn=HTMLElement.prototype.removeChild;function ln(t,n,e){return void 0===n&&(n={}),a(this,void 0,void 0,(function(){var r,o,f,s,l,p,h,w,m,b,g,x,_,j,E,O,P,S,A,T,M,L,I,N,U,D,C,R,k,H,B,G,W,z,q,F,V,$,K,Y,Z,J,Q,X,tt=this;return c(this,(function(nt){switch(nt.label){case 0:return r=t.entry,o=t.name,f=n.singular,s=void 0!==f&&f,l=n.sandbox,p=void 0===l||l,h=u(n,["singular","sandbox"]),[4,lt(r,h)];case 1:return w=nt.sent(),m=w.template,b=w.execScripts,g=w.assetPublicPath,[4,on(s,t)];case 2:return nt.sent()?[4,cn&&cn.promise]:[3,4];case 3:nt.sent(),nt.label=4;case 4:return x=o+"_"+ +new Date,_="object"===y(p)&&!!p.strictStyleIsolation,j=(et=x,function(t){return'<div id="'+Pt(et)+'">'+t+"</div>"})(m),E=an(j,_),O="container"in t?t.container:void 0,P="render"in t?t.render:void 0,(S=function(t,n,e,r){return function(o,i){var u=o.element,a=o.loading;if(r)return r({loading:a,appContent:u?n:""});var c="string"==typeof e?document.querySelector(e):e;"unmounted"!==i&&en(c,function(){switch(i){case"loading":case"mounting":return"[qiankun] Target container with "+e+" not existed while "+t+" "+i+"!";case"mounted":return"[qiankun] Target container with "+e+" not existed after "+t+" "+i+"!";default:return"[qiankun] Target container with "+e+" not existed while "+t+" rendering!"}}());if(c&&!c.contains(u)){for(;c.firstChild;)sn.call(c,c.firstChild);u&&fn.call(c,u)}}}(o,j,O,P))({element:E,loading:!0},"loading"),A=function(t,n,e,r,o){return function(){if(e){if(r)throw new Error("[qiankun]: strictStyleIsolation can not be used with legacy render!");var i=document.getElementById(Pt(n));return en(i,"[qiankun] Wrapper element for "+t+" with instance "+n+" is not existed!"),i}var u=o();return en(u,"[qiankun] Wrapper element for "+t+" with instance "+n+" is not existed!"),r?u.shadowRoot:u}}(o,x,!!P,_,(function(){return E})),T=window,M=function(){return Promise.resolve()},L=function(){return Promise.resolve()},p&&(I=nn(o,A,Boolean(s)),T=I.proxy,M=I.mount,L=I.unmount),N=v()({},dt(T,g),e,(function(t,n){return d()(null!=t?t:[],null!=n?n:[])})),U=N.beforeUnmount,D=void 0===U?[]:U,C=N.afterUnmount,R=void 0===C?[]:C,k=N.afterMount,H=void 0===k?[]:k,B=N.beforeMount,G=void 0===B?[]:B,W=N.beforeLoad,[4,rn(Et(void 0===W?[]:W),t)];case 5:return nt.sent(),[4,b(T,!s)];case 6:return z=nt.sent(),q=function(t,n,e){if(St(t))return t;var r=e[n];if(St(r))return r;throw new Error("[qiankun] You need to export lifecycle functions in "+n+" entry")}(z,o,T),F=q.bootstrap,V=q.mount,$=q.unmount,K=q.update,Y=bt(x),Z=Y.onGlobalStateChange,J=Y.setGlobalState,Q=Y.offGlobalStateChange,X={name:x,bootstrap:F,mount:[function(){return a(tt,void 0,void 0,(function(){return c(this,(function(n){switch(n.label){case 0:return[4,on(s,t)];case 1:return n.sent()&&cn?[2,cn.promise]:[2,void 0]}}))}))},function(){return a(tt,void 0,void 0,(function(){return c(this,(function(t){return E=E||an(j,_),S({element:E,loading:!0},"mounting"),[2]}))}))},function(){return a(tt,void 0,void 0,(function(){return c(this,(function(n){return[2,rn(Et(G),t)]}))}))},M,function(t){return a(tt,void 0,void 0,(function(){return c(this,(function(n){return[2,V(i(i({},t),{container:A(),setGlobalState:J,onGlobalStateChange:Z}))]}))}))},function(){return a(tt,void 0,void 0,(function(){return c(this,(function(t){return[2,S({element:E,loading:!1},"mounted")]}))}))},function(){return a(tt,void 0,void 0,(function(){return c(this,(function(n){return[2,rn(Et(H),t)]}))}))},function(){return a(tt,void 0,void 0,(function(){return c(this,(function(n){switch(n.label){case 0:return[4,on(s,t)];case 1:return n.sent()&&(cn=new At),[2]}}))}))}],unmount:[function(){return a(tt,void 0,void 0,(function(){return c(this,(function(n){return[2,rn(Et(D),t)]}))}))},function(t){return a(tt,void 0,void 0,(function(){return c(this,(function(n){return[2,$(i(i({},t),{container:A()}))]}))}))},L,function(){return a(tt,void 0,void 0,(function(){return c(this,(function(n){return[2,rn(Et(R),t)]}))}))},function(){return a(tt,void 0,void 0,(function(){return c(this,(function(t){return S({element:null,loading:!1},"unmounted"),Q(x),E=null,[2]}))}))},function(){return a(tt,void 0,void 0,(function(){return c(this,(function(n){switch(n.label){case 0:return[4,on(s,t)];case 1:return n.sent()&&cn&&cn.resolve(),[2]}}))}))}]},"function"==typeof K&&(X.update=K),[2,X]}var et}))}))}var pn=window.requestIdleCallback||function(t){var n=Date.now();return setTimeout((function(){t({didTimeout:!1,timeRemaining:function(){return Math.max(0,50-(Date.now()-n))}})}),1)},dn=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),hn=!!navigator.connection&&(navigator.connection.saveData||/(2|3)g/.test(navigator.connection.effectiveType));function vn(t,n){var e=this;dn||hn||pn((function(){return a(e,void 0,void 0,(function(){var e,r,o;return c(this,(function(i){switch(i.label){case 0:return[4,lt(t,n)];case 1:return e=i.sent(),r=e.getExternalScripts,o=e.getExternalStyleSheets,pn(o),pn(r),[2]}}))}))}))}function yn(t,n){window.addEventListener("single-spa:first-mount",(function e(){var r=Object(l.b)();t.filter((function(t){return-1===r.indexOf(t.name)})).forEach((function(t){return vn(t.entry,n)})),window.removeEventListener("single-spa:first-mount",e)}))}function wn(t,n){t.forEach((function(t){return vn(t.entry,n)}))}window.__POWERED_BY_QIANKUN__=!0;var mn=[],bn={},gn=new At;function xn(t){window.addEventListener("single-spa:no-app-change",(function n(){Object(l.b)().length||Object(l.d)(t),window.removeEventListener("single-spa:no-app-change",n)}))}const _n=document.createElement("div");var jn;_n.setAttribute("style","position: absolute;top:0;right:0;bottom:0;left:0;"),_n.setAttribute("id","app"),document.body.append(_n),function(t,n){var e=this,r=t.filter((function(t){return!mn.some((function(n){return n.name===t.name}))}));mn=s(mn,r),r.forEach((function(t){var r=t.name,f=t.activeRule,p=t.loader,d=void 0===p?o.a:p,h=t.props,v=u(t,["name","activeRule","loader","props"]);Object(l.e)({name:r,app:function(){return a(e,void 0,void 0,(function(){var t,e,o,f=this;return c(this,(function(l){switch(l.label){case 0:return d(!0),[4,gn.promise];case 1:return l.sent(),[4,ln(i({name:r,props:h},v),bn,n)];case 2:return t=l.sent(),e=t.mount,o=u(t,["mount"]),[2,i({mount:s([function(){return a(f,void 0,void 0,(function(){return c(this,(function(t){return[2,d(!0)]}))}))}],Et(e),[function(){return a(f,void 0,void 0,(function(){return c(this,(function(t){return[2,d(!1)]}))}))}])},o)]}}))}))},activeWhen:f,customProps:h})}))}([{name:"purehtml",entry:"//localhost:8094",container:_n,activeRule:(jn="/app1",t=>t.pathname.startsWith(jn))}],{beforeLoad:[t=>{console.log("before load",t)}],beforeMount:[t=>{console.log("before mount",t)}],afterUnmount:[t=>{console.log("after unload",t)}]});xn("/app1"),function(t){void 0===t&&(t={});var n=(bn=i({prefetch:!0,singular:!0,sandbox:!0},t)).prefetch,e=bn.sandbox,r=bn.singular,o=bn.urlRerouteOnly,f=u(bn,["prefetch","sandbox","singular","urlRerouteOnly"]);n&&function(t,n,e){var r=this,o=function(n){return t.filter((function(t){return n.includes(t.name)}))};if(Array.isArray(n))yn(o(n),e);else if(xt()(n))a(r,void 0,void 0,(function(){var r,i,u,a,f;return c(this,(function(c){switch(c.label){case 0:return[4,n(t)];case 1:return r=c.sent(),i=r.criticalAppNames,u=void 0===i?[]:i,a=r.minorAppsName,f=void 0===a?[]:a,wn(o(u),e),yn(o(f),e),[2]}}))}));else switch(n){case!0:yn(t,e);break;case"all":wn(t,e)}}(mn,n,f),e&&(window.Proxy||(console.warn("[qiankun] Miss window.Proxy, proxySandbox will degenerate into snapshotSandbox"),r||(console.error("[qiankun] singular is forced to be true when sandbox enable but proxySandbox unavailable"),bn.singular=!0))),Object(l.f)({urlRerouteOnly:o}),gn.resolve()}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,